{"ast":null,"code":"import Enum from \"../../Enumeradores\";\nimport axios from \"axios\";\n\nconst _enum = new Enum(); //___________________________________________________________________order asc\n\n\nexport function _order(arg) {\n  return {\n    type: _enum.ORDER,\n    payload: arg\n  };\n} //_____________________________________________________________________GET\n\nexport function getCountries() {\n  return async function (dispatch) {\n    try {\n      const result = await axios.get(\"http://localhost:3001/Countries\");\n      const countries = result.data;\n\n      if (countries.length === 0) {\n        countries;\n      }\n\n      return dispatch({\n        type: _enum.GET_COUNTRIES,\n        payload: countries\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n} //___________________________________________________________________\n\nexport function addActi(activity) {\n  return async () => {\n    try {\n      return await axios.post(\"http://localhost:3001/activity\", activity);\n    } catch (err) {\n      return new Error(err);\n    }\n  };\n} //_________________________________________________________________________________GET ID\n\nexport function getCountryId(id) {\n  return async function (dispatch) {\n    try {\n      const resp = await axios.get(`http://localhost:3001/countries/${id}`);\n\n      if (resp.data.length > 0) {\n        return dispatch({\n          type: _enum.GET_COUNTRY_ID,\n          payload: resp.data\n        });\n      } else {\n        return dispatch({\n          type: _enum.GET_COUNTRY_ID,\n          payload: null\n        });\n      }\n    } catch (e) {\n      return new Error(e);\n    }\n  };\n} //_________________________________________________________________________________GET NAME\n\nexport function getCountryName(name) {\n  return async function (dispatch) {\n    try {\n      const resp = await axios.get(`http://localhost:3001/Countries?name=${name}`);\n\n      if (resp.data.length > 0) {\n        return dispatch({\n          type: _enum.GET_COUNTRY_NAME,\n          payload: resp.data\n        });\n      } else {\n        return dispatch({\n          type: _enum.GET_COUNTRY_NAME,\n          payload: null\n        });\n      }\n    } catch (e) {\n      return new Error(e);\n    }\n  };\n} //________________________________________________________________________________________clear\n\nexport function clear() {\n  return {\n    type: _enum.CLEAR,\n    payload: null\n  };\n} //_______________________________________________________________________________________all Countries\n\nexport function allCountries() {\n  return async function () {\n    try {\n      await axios.get(\"http://localhost:3001/allCountries\");\n    } catch (e) {\n      return new Error(e);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/ROY/Desktop/proyect invidivual countries/PI-countries/PI-Countries-main/client/src/f_redux/f_actions/actions.js"],"names":["Enum","axios","_enum","_order","arg","type","ORDER","payload","getCountries","dispatch","result","get","countries","data","length","GET_COUNTRIES","e","console","log","addActi","activity","post","err","Error","getCountryId","id","resp","GET_COUNTRY_ID","getCountryName","name","GET_COUNTRY_NAME","clear","CLEAR","allCountries"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,oBAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,KAAK,GAAG,IAAIF,IAAJ,EAAd,C,CACA;;;AACA,OAAO,SAASG,MAAT,CAAgBC,GAAhB,EAAqB;AAC1B,SAAO;AAAEC,IAAAA,IAAI,EAAEH,KAAK,CAACI,KAAd;AAAqBC,IAAAA,OAAO,EAAEH;AAA9B,GAAP;AACD,C,CAED;;AACA,OAAO,SAASI,YAAT,GAAwB;AAC7B,SAAO,gBAAgBC,QAAhB,EAA0B;AAC/B,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,iCAAV,CAArB;AACA,YAAMC,SAAS,GAAGF,MAAM,CAACG,IAAzB;;AACD,UAAGD,SAAS,CAACE,MAAV,KAAmB,CAAtB,EAAwB;AACpBF,QAAAA,SAAS;AACZ;;AAEA,aAAOH,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAEH,KAAK,CAACa,aAAd;AAA6BR,QAAAA,OAAO,EAAEK;AAAtC,OAAD,CAAf;AACD,KARD,CAQE,OAAOI,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF,GAZD;AAaD,C,CAED;;AACA,OAAO,SAASG,OAAT,CAAiBC,QAAjB,EAA2B;AAChC,SAAO,YAAY;AACjB,QAAI;AACF,aAAO,MAAMnB,KAAK,CAACoB,IAAN,CAAW,gCAAX,EAA6CD,QAA7C,CAAb;AACD,KAFD,CAEE,OAAOE,GAAP,EAAY;AACZ,aAAO,IAAIC,KAAJ,CAAUD,GAAV,CAAP;AACD;AACF,GAND;AAOD,C,CACD;;AACA,OAAO,SAASE,YAAT,CAAsBC,EAAtB,EAA0B;AAC/B,SAAO,gBAAgBhB,QAAhB,EAA0B;AAC/B,QAAI;AACF,YAAMiB,IAAI,GAAG,MAAMzB,KAAK,CAACU,GAAN,CAAW,mCAAkCc,EAAG,EAAhD,CAAnB;;AACA,UAAIC,IAAI,CAACb,IAAL,CAAUC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,eAAOL,QAAQ,CAAC;AAAEJ,UAAAA,IAAI,EAAEH,KAAK,CAACyB,cAAd;AAA8BpB,UAAAA,OAAO,EAAEmB,IAAI,CAACb;AAA5C,SAAD,CAAf;AACD,OAFD,MAEO;AACL,eAAOJ,QAAQ,CAAC;AAAEJ,UAAAA,IAAI,EAAEH,KAAK,CAACyB,cAAd;AAA8BpB,UAAAA,OAAO,EAAE;AAAvC,SAAD,CAAf;AACD;AACF,KAPD,CAOE,OAAOS,CAAP,EAAU;AACV,aAAO,IAAIO,KAAJ,CAAUP,CAAV,CAAP;AACD;AACF,GAXD;AAYD,C,CAED;;AACA,OAAO,SAASY,cAAT,CAAwBC,IAAxB,EAA8B;AACnC,SAAO,gBAAgBpB,QAAhB,EAA0B;AAC/B,QAAI;AACF,YAAMiB,IAAI,GAAG,MAAMzB,KAAK,CAACU,GAAN,CAChB,wCAAuCkB,IAAK,EAD5B,CAAnB;;AAGA,UAAIH,IAAI,CAACb,IAAL,CAAUC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,eAAOL,QAAQ,CAAC;AAAEJ,UAAAA,IAAI,EAAEH,KAAK,CAAC4B,gBAAd;AAAgCvB,UAAAA,OAAO,EAAEmB,IAAI,CAACb;AAA9C,SAAD,CAAf;AACD,OAFD,MAEO;AACL,eAAOJ,QAAQ,CAAC;AAAEJ,UAAAA,IAAI,EAAEH,KAAK,CAAC4B,gBAAd;AAAgCvB,UAAAA,OAAO,EAAE;AAAzC,SAAD,CAAf;AACD;AACF,KATD,CASE,OAAOS,CAAP,EAAU;AACV,aAAO,IAAIO,KAAJ,CAAUP,CAAV,CAAP;AACD;AACF,GAbD;AAcD,C,CACD;;AACA,OAAO,SAASe,KAAT,GAAgB;AACnB,SAAO;AACH1B,IAAAA,IAAI,EAACH,KAAK,CAAC8B,KADR;AACczB,IAAAA,OAAO,EAAC;AADtB,GAAP;AAGH,C,CACD;;AACA,OAAO,SAAS0B,YAAT,GAAwB;AAC7B,SAAO,kBAAkB;AACvB,QAAI;AACF,YAAMhC,KAAK,CAACU,GAAN,CAAU,oCAAV,CAAN;AACD,KAFD,CAEE,OAAOK,CAAP,EAAU;AACV,aAAO,IAAIO,KAAJ,CAAUP,CAAV,CAAP;AACD;AACF,GAND;AAOD","sourcesContent":["import Enum from \"../../Enumeradores\";\r\nimport axios from \"axios\";\r\nconst _enum = new Enum();\r\n//___________________________________________________________________order asc\r\nexport function _order(arg) {\r\n  return { type: _enum.ORDER, payload: arg };\r\n}\r\n\r\n//_____________________________________________________________________GET\r\nexport function getCountries() {\r\n  return async function (dispatch) {\r\n    try {\r\n      const result = await axios.get(\"http://localhost:3001/Countries\");\r\n      const countries = result.data;\r\n     if(countries.length===0){\r\n         countries\r\n     }\r\n\r\n      return dispatch({ type: _enum.GET_COUNTRIES, payload: countries });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n}\r\n\r\n//___________________________________________________________________\r\nexport function addActi(activity) {\r\n  return async () => {\r\n    try {\r\n      return await axios.post(\"http://localhost:3001/activity\", activity);\r\n    } catch (err) {\r\n      return new Error(err);\r\n    }\r\n  };\r\n}\r\n//_________________________________________________________________________________GET ID\r\nexport function getCountryId(id) {\r\n  return async function (dispatch) {\r\n    try {\r\n      const resp = await axios.get(`http://localhost:3001/countries/${id}`);\r\n      if (resp.data.length > 0) {\r\n        return dispatch({ type: _enum.GET_COUNTRY_ID, payload: resp.data });\r\n      } else {\r\n        return dispatch({ type: _enum.GET_COUNTRY_ID, payload: null });\r\n      }\r\n    } catch (e) {\r\n      return new Error(e);\r\n    }\r\n  };\r\n}\r\n\r\n//_________________________________________________________________________________GET NAME\r\nexport function getCountryName(name) {\r\n  return async function (dispatch) {\r\n    try {\r\n      const resp = await axios.get(\r\n        `http://localhost:3001/Countries?name=${name}`\r\n      );\r\n      if (resp.data.length > 0) {\r\n        return dispatch({ type: _enum.GET_COUNTRY_NAME, payload: resp.data });\r\n      } else {\r\n        return dispatch({ type: _enum.GET_COUNTRY_NAME, payload: null });\r\n      }\r\n    } catch (e) {\r\n      return new Error(e);\r\n    }\r\n  };\r\n}\r\n//________________________________________________________________________________________clear\r\nexport function clear(){\r\n    return {\r\n        type:_enum.CLEAR,payload:null\r\n    }\r\n}\r\n//_______________________________________________________________________________________all Countries\r\nexport function allCountries() {\r\n  return async function () {\r\n    try {\r\n      await axios.get(\"http://localhost:3001/allCountries\");\r\n    } catch (e) {\r\n      return new Error(e);\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}